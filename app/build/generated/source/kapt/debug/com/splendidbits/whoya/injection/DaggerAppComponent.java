// Generated by Dagger (https://dagger.dev).
package com.splendidbits.whoya.injection;

import com.splendidbits.whoya.activity.HostActivity;
import com.splendidbits.whoya.activity.HostActivity_MembersInjector;
import com.splendidbits.whoya.adapter.HistoryRecyclerAdapter;
import com.splendidbits.whoya.dao.CallDataRepository;
import com.splendidbits.whoya.fragment.HistoryFragment;
import com.splendidbits.whoya.fragment.HistoryFragment_MembersInjector;
import com.splendidbits.whoya.helper.PermissionsHelper;
import com.splendidbits.whoya.main.FinishedCallBroadcastReceiver;
import com.splendidbits.whoya.main.FinishedCallBroadcastReceiver_MembersInjector;
import com.splendidbits.whoya.main.WhoyaApplication;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final ApplicationModule applicationModule;

  private final DataModule dataModule;

  private final ComponentModule componentModule;

  private DaggerAppComponent(ApplicationModule applicationModuleParam, DataModule dataModuleParam,
      ComponentModule componentModuleParam) {
    this.applicationModule = applicationModuleParam;
    this.dataModule = dataModuleParam;
    this.componentModule = componentModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private PermissionsHelper getPermissionsHelper() {
    return DataModule_ProvidePermissionsHelperFactory.providePermissionsHelper(dataModule, ApplicationModule_ProvideContextFactory.provideContext(applicationModule));}

  private CallDataRepository getCallDataRepository() {
    return DataModule_ProvideRepositoryFactory.provideRepository(dataModule, ApplicationModule_ProvideContextFactory.provideContext(applicationModule));}

  private HistoryRecyclerAdapter getHistoryRecyclerAdapter() {
    return ComponentModule_ProvideRecyclerAdapterFactory.provideRecyclerAdapter(componentModule, ApplicationModule_ProvideContextFactory.provideContext(applicationModule));}

  @Override
  public void inject(WhoyaApplication application) {
  }

  @Override
  public void inject(HostActivity hostActivity) {
    injectHostActivity(hostActivity);}

  @Override
  public void inject(HistoryFragment historyFragment) {
    injectHistoryFragment(historyFragment);}

  @Override
  public void inject(FinishedCallBroadcastReceiver finishedCallBroadcastReceiver) {
    injectFinishedCallBroadcastReceiver(finishedCallBroadcastReceiver);}

  private HostActivity injectHostActivity(HostActivity instance) {
    HostActivity_MembersInjector.injectPermissionsHelper(instance, getPermissionsHelper());
    return instance;
  }

  private HistoryFragment injectHistoryFragment(HistoryFragment instance) {
    HistoryFragment_MembersInjector.injectDataRepository(instance, getCallDataRepository());
    HistoryFragment_MembersInjector.injectRecyclerAdapter(instance, getHistoryRecyclerAdapter());
    HistoryFragment_MembersInjector.injectPermissionsHelper(instance, getPermissionsHelper());
    return instance;
  }

  private FinishedCallBroadcastReceiver injectFinishedCallBroadcastReceiver(
      FinishedCallBroadcastReceiver instance) {
    FinishedCallBroadcastReceiver_MembersInjector.injectRepository(instance, getCallDataRepository());
    return instance;
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private DataModule dataModule;

    private ComponentModule componentModule;

    private Builder() {
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public Builder dataModule(DataModule dataModule) {
      this.dataModule = Preconditions.checkNotNull(dataModule);
      return this;
    }

    public Builder componentModule(ComponentModule componentModule) {
      this.componentModule = Preconditions.checkNotNull(componentModule);
      return this;
    }

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(applicationModule, ApplicationModule.class);
      if (dataModule == null) {
        this.dataModule = new DataModule();
      }
      if (componentModule == null) {
        this.componentModule = new ComponentModule();
      }
      return new DaggerAppComponent(applicationModule, dataModule, componentModule);
    }
  }
}
